/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package generated.vatit.com.api;

import generated.vatit.com.model.InlineResponse500;
import generated.vatit.com.model.Todo;
import generated.vatit.com.model.Todos;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-11-28T00:51:35.936+02:00[Africa/Johannesburg]")

@Validated
@Api(value = "todos", description = "the todos API")
public interface TodosApi {

    default TodosApiDelegate getDelegate() {
        return new TodosApiDelegate() {};
    }

    /**
     * GET /todos : Returns a list of all todos
     * Returns all todos currently stored with the service. 
     *
     * @return OK (status code 200)
     *         or General Error (status code 500)
     */
    @ApiOperation(value = "Returns a list of all todos", nickname = "todosGet", notes = "Returns all todos currently stored with the service. ", response = Todos.class, tags={ "todos", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Todos.class),
        @ApiResponse(code = 500, message = "General Error", response = InlineResponse500.class) })
    @RequestMapping(value = "/todos",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Todos> todosGet() {
        return getDelegate().todosGet();
    }


    /**
     * DELETE /todos/{id} : Delete a todo
     * Removes the todo matching the given id. 
     *
     * @param id  (required)
     * @return OK (status code 200)
     *         or General Error (status code 500)
     */
    @ApiOperation(value = "Delete a todo", nickname = "todosIdDelete", notes = "Removes the todo matching the given id. ", tags={ "todos", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 500, message = "General Error", response = InlineResponse500.class) })
    @RequestMapping(value = "/todos/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> todosIdDelete(@ApiParam(value = "",required=true) @PathVariable("id") String id) {
        return getDelegate().todosIdDelete(id);
    }


    /**
     * PUT /todos/{id} : Update a todo
     * Updates the entire todo object matching the given id, with the exception of the id. 
     *
     * @param id  (required)
     * @param todo  (required)
     * @return OK (status code 200)
     *         or General Error (status code 500)
     */
    @ApiOperation(value = "Update a todo", nickname = "todosIdPut", notes = "Updates the entire todo object matching the given id, with the exception of the id. ", response = Todo.class, tags={ "todos", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Todo.class),
        @ApiResponse(code = 500, message = "General Error", response = InlineResponse500.class) })
    @RequestMapping(value = "/todos/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Todo> todosIdPut(@ApiParam(value = "",required=true) @PathVariable("id") String id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Todo todo) {
        return getDelegate().todosIdPut(id, todo);
    }


    /**
     * POST /todos : Add a new todo
     * Creates a new todo based on the given structure with a unique generated id. 
     *
     * @param todo  (required)
     * @return OK (status code 200)
     *         or General Error (status code 500)
     */
    @ApiOperation(value = "Add a new todo", nickname = "todosPost", notes = "Creates a new todo based on the given structure with a unique generated id. ", response = Todo.class, tags={ "todos", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Todo.class),
        @ApiResponse(code = 500, message = "General Error", response = InlineResponse500.class) })
    @RequestMapping(value = "/todos",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Todo> todosPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Todo todo) {
        return getDelegate().todosPost(todo);
    }

}
